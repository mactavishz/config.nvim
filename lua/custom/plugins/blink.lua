return {
  -- 'saghen/blink.cmp',
  -- -- optional: provides snippets for the snippet source
  -- dependencies = {
  --   'giuxtaposition/blink-cmp-copilot',
  --   {
  --     'L3MON4D3/LuaSnip',
  --     build = (function()
  --       -- Build Step is needed for regex support in snippets.
  --       -- This step is not supported in many windows environments.
  --       -- Remove the below condition to re-enable on windows.
  --       if vim.fn.has 'win32' == 1 or vim.fn.executable 'make' == 0 then
  --         return
  --       end
  --       return 'make install_jsregexp'
  --     end)(),
  --     dependencies = {
  --       -- `friendly-snippets` contains a variety of premade snippets.
  --       --    See the README about individual language/framework/plugin snippets:
  --       --    https://github.com/rafamadriz/friendly-snippets
  --       {
  --         'rafamadriz/friendly-snippets',
  --         config = function()
  --           require('luasnip.loaders.from_vscode').lazy_load()
  --         end,
  --       },
  --     },
  --   },
  --   'rafamadriz/friendly-snippets',
  -- },
  --
  -- -- use a release tag to download pre-built binaries
  -- version = 'v0.*',
  -- opts = {
  --   keymap = {
  --     -- preset = 'default',
  --     ['<C-space>'] = { 'show', 'show_documentation', 'hide_documentation' },
  --     ['<C-e>'] = { 'hide' },
  --     ['<C-y>'] = { 'select_and_accept' },
  --
  --     ['<C-p>'] = { 'select_prev', 'fallback' },
  --     ['<C-n>'] = { 'select_next', 'fallback' },
  --
  --     ['<C-b>'] = { 'scroll_documentation_up', 'fallback' },
  --     ['<C-f>'] = { 'scroll_documentation_down', 'fallback' },
  --     -- Don't use tabs
  --     -- ['<Tab>'] = { 'snippet_forward', 'fallback' },
  --     -- ['<S-Tab>'] = { 'snippet_backward', 'fallback' },
  --   },
  --
  --   snippets = {
  --     expand = function(snippet)
  --       require('luasnip').lsp_expand(snippet)
  --     end,
  --     active = function(filter)
  --       if filter and filter.direction then
  --         return require('luasnip').jumpable(filter.direction)
  --       end
  --       return require('luasnip').in_snippet()
  --     end,
  --     jump = function(direction)
  --       require('luasnip').jump(direction)
  --     end,
  --   },
  --   completion = {
  --     enabled = true,
  --     accept = { auto_brackets = { enabled = true } },
  --     menu = {
  --       draw = {
  --         align_to_component = 'label', -- or 'none' to disable
  --         padding = 1,
  --         gap = 4,
  --         columns = { { 'label', 'label_description', gap = 1 }, { 'kind_icon', 'kind', gap = 1 } },
  --       },
  --     },
  --     documentation = {
  --       auto_show = true,
  --     },
  --     ghost_text = {
  --       enabled = false,
  --     },
  --   },
  --
  --   appearance = {
  --     use_nvim_cmp_as_default = true,
  --     nerd_font_variant = 'mono',
  --     kind_icons = {
  --       Array = '',
  --       Copilot = '',
  --       Text = '',
  --       Method = '󰊕',
  --       Function = '󰊕',
  --       Constructor = '󰒓',
  --
  --       Field = '󰜢',
  --       Variable = '󰆦',
  --       Property = '󰖷',
  --
  --       Class = '󱡠',
  --       Interface = '󱡠',
  --       Struct = '󱡠',
  --       Module = '󰅩',
  --
  --       Unit = '󰪚',
  --       Value = '󰦨',
  --       Enum = '󰦨',
  --       EnumMember = '󰦨',
  --
  --       Keyword = '󰻾',
  --       Constant = '󰏿',
  --
  --       Snippet = '󱄽',
  --       Color = '󰏘',
  --       File = '󰈔',
  --       Reference = '󰬲',
  --       Folder = '󰉋',
  --       Event = '󱐋',
  --       Operator = '󰪚',
  --       TypeParameter = '󰬛',
  --     },
  --   },
  --
  --   sources = {
  --     default = { 'lsp', 'path', 'snippets', 'buffer', 'copilot' },
  --     -- optionally disable cmdline completions
  --     providers = {
  --       lazydev = { name = 'LazyDev', module = 'lazydev.integrations.blink', fallbacks = { 'lsp' } },
  --       copilot = {
  --         name = 'copilot',
  --         module = 'blink-cmp-copilot',
  --         score_offset = 100,
  --         async = true,
  --         transform_items = function(_, items)
  --           local CompletionItemKind = require('blink.cmp.types').CompletionItemKind
  --           local kind_idx = #CompletionItemKind + 1
  --           CompletionItemKind[kind_idx] = 'Copilot'
  --           for _, item in ipairs(items) do
  --             item.kind = kind_idx
  --           end
  --           return items
  --         end,
  --       },
  --     },
  --     completion = {
  --       enabled_providers = { 'lsp', 'path', 'snippets', 'buffer', 'copilot' },
  --     },
  --   },
  --   -- cmdline = {},
  --
  --   -- experimental signature help support
  --   signature = { enabled = true },
  -- },
  -- config = function(_, opts)
  --   require('blink-cmp').setup(opts)
  --   local luasnip = require 'luasnip'
  --   luasnip.config.setup {
  --     history = true,
  --     updateevents = 'TextChanged,TextChangedI',
  --   }
  --
  --   -- Think of <c-l> as moving to the right of your snippet expansion.
  --   --  So if you have a snippet that's like:
  --   --  function $name($args)
  --   --    $body
  --   --  end
  --   --
  --   -- <c-l> will move you to the right of each of the expansion locations.
  --   -- <c-h> is similar, except moving you backwards.
  --
  --   -- For more advanced Luasnip keymaps (e.g. selecting choice nodes, expansion) see:
  --   --    https://github.com/L3MON4D3/LuaSnip?tab=readme-ov-file#keymaps
  --   vim.keymap.set({ 'i', 's' }, '<C-l>', function()
  --     if luasnip.expand_or_locally_jumpable() then
  --       luasnip.expand_or_jump()
  --     end
  --   end, { silent = true })
  --
  --   vim.keymap.set({ 'i', 's' }, '<C-h>', function()
  --     if luasnip.locally_jumpable(-1) then
  --       luasnip.jump(-1)
  --     end
  --   end, { silent = true })
  --   vim.keymap.set({ 'i', 's' }, '<C-k>', function()
  --     if luasnip.choice_active() then
  --       luasnip.change_choice(1)
  --     end
  --   end, { silent = true })
  -- end,
}
